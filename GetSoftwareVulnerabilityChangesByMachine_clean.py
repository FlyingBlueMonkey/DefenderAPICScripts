import json
import urllib.request
import urllib.parse
import requests
import datetime as dt
import zlib
from datetime import datetime, timedelta
from urllib.request import urlopen
from urllib.parse import quote
# Variables
requestUrl = "https://api-us.securitycenter.microsoft.com/api/machines/SoftwareVulnerabilityChangesByMachine"
lookbackDays = -14 # How many days back should we look? Max is -14 days (note you MUST supply the minus sign)
sinceTime = datetime.now() + timedelta(days=lookbackDays) # Todays date minus lookbackDays
pageSize = 100 # Maximum results per page (default is 50,000, max is 200,000)
destinationFolder = "c:/temp/downloadedVulnerabilityChanges/" # Where should we store the downloaded files?
fileNamePrefix = "mdvm_changes_" # What should we use as a prefix for the filename?
intCounter = 0 # Counter Value that we're going to use for our filenames in the for each loop to generate unique names
downloadedFilesList = [] # an array that will hold the filenames that we're writing out to the disk

# function get_aadToken: Retrieves the AAD Token that we need to access the service
def get_aadToken():
    tenantId = "[Your Azure AD TenantId]"            
    appId = "[Your Azure Ad AppId]"               
    appSecret = "[Your App Secret]"
 
    url = "https://login.microsoftonline.com/%s/oauth2/token" % (tenantId)
    resourceAppIdUri = 'https://api.securitycenter.windows.com'
    body = {
        'resource' : resourceAppIdUri,
        'client_id' : appId,
        'client_secret' : appSecret,
        'grant_type' : 'client_credentials'
    }
 
    data = urllib.parse.urlencode(body).encode("utf-8")
    req = urllib.request.Request(url, data)
    response = urllib.request.urlopen(req)
    jsonResponse = json.loads(response.read())
    return jsonResponse
    
# function softwareVulnerabilitiesExport: Gets download links for vulnerability export files
# Note: These files are in gzip format
def softwareVulnerabilitiesExport(requestUrl,aadToken,oDataUrl=None):
        headers = {
        'Content-Type' : 'application/json',
        'Authorization' : "Bearer " + aadToken
        }
        targetUrl = requestUrl + "?pageSize=" + str(pageSize) + "&sinceTime=" + quote(str(sinceTime))
        if oDataUrl is not None:
            print("An oData Url was supplied:" + oDataUrl)
            targetUrl = oDataUrl #Change the targetUrl to the supplied oData.next Url instead
        print("Calling targetUrl:" + targetUrl)
        api_response = requests.get(targetUrl, headers=headers)
        json_response = api_response.json()
        #return the entire json response body so that we can decide what to extract in the calling function
        return json_response

# Get the json body returned from calling get_aadToken
aadTokenJson = get_aadToken()
aadToken = aadTokenJson["access_token"] # Extract the access_token
# Get the initial list of changes.
vulnerabilityChanges = softwareVulnerabilitiesExport(requestUrl, aadToken)
#print(vulnerabilityChanges)
destinationFileName = destinationFolder + fileNamePrefix + str(intCounter) + ".json"
with open(destinationFileName,'wt') as targetFile:
    targetFile.write(str(vulnerabilityChanges))
    # add the filename to the downloaded files list
    downloadedFilesList.append(destinationFileName)
    # Increment the counter value
    intCounter += 1
while '@odata.nextLink' in vulnerabilityChanges:
    # There is data in the @odata.nextLink field meaning that there is more data to return.
    vulnNextUrl = vulnerabilityChanges["@odata.nextLink"]
    vulnerabilityChanges = softwareVulnerabilitiesExport("", aadToken,vulnNextUrl)
    destinationFileName = destinationFolder + fileNamePrefix + str(intCounter) + ".json"
    with open(destinationFileName,'wt') as targetFile:
        targetFile.write(str(vulnerabilityChanges))
        # add the filename to the downloaded files list
        downloadedFilesList.append(destinationFileName)
    # Increment the counter value and loop
    intCounter += 1
# write out the filenames that we just downloaded
for filesWritten in downloadedFilesList:
    print(filesWritten)
